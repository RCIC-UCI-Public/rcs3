{
  "Comment": "Use Athena to query files in {{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }} that have been moved to Glacier",
  "StartAt": "create Athena queries",
  "States": {
    "create database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::athena:startQueryExecution",
      "Parameters": {
        "QueryString.$": "States.Format( 'create database if not exists {}', $.QueryDatabase )",
        "ResultConfiguration": {
          "OutputLocation.$": "States.Format( 's3://{}/{}', $.QueryInventory.QueryList[0].ResultsBucket, $.QueryInventory.QueryList[0].ResultsPrefix )"
        },
        "WorkGroup": "rcs3"
      },
      "Next": "load schema",
      "ResultPath": null
    },
    "create Athena queries": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "BackupBucket": "{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }}",
          "InventoryBucket": "{{ OWNER }}-{{ SYSTEM }}-{{ INVENTORY_POSTFIX }}",
          "HiveDir": "{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }}/{{ OWNER }}-{{ SYSTEM }}-daily/hive/dt={}-01-00/",
          "RestoreList.$": "$.RestoreList",
          "ExpireDays.$": "$.ExpireDays"
        },
        "FunctionName": "arn:aws:lambda:{{ REGION }}:{{ ACCOUNT }}:function:createAthenaQueries:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "create database",
      "Comment": "look for latest S3 inventory",
      "OutputPath": "$.Payload"
    },
    "load schema": {
      "Type": "Task",
      "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
      "Parameters": {
        "QueryExecutionContext": {
          "Database.$": "$.QueryDatabase"
        },
        "QueryString.$": "$.QuerySchema",
        "ResultConfiguration": {
          "OutputLocation.$": "States.Format( 's3://{}/{}', $.QueryInventory.QueryList[0].ResultsBucket, $.QueryInventory.QueryList[0].ResultsPrefix )"
        },
        "WorkGroup": "rcs3"
      },
      "ResultPath": null,
      "OutputPath": "$.QueryInventory",
      "Next": "iterate over each string"
    },
    "iterate over each string": {
      "Type": "Map",
      "ItemsPath": "$.QueryList",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "query inventory",
        "States": {
          "query inventory": {
            "Type": "Task",
            "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
            "Parameters": {
              "QueryExecutionContext": {
                "Database.$": "$.QueryDatabase"
              },
              "QueryString.$": "$.SearchString",
              "ResultConfiguration": {
                "OutputLocation.$": "States.Format( 's3://{}/{}', $.ResultsBucket, $.ResultsPrefix )"
              },
              "WorkGroup": "rcs3"
            },
            "End": true,
            "ResultSelector": {
              "ResultsFile.$": "$.QueryExecution.ResultConfiguration.OutputLocation",
              "State.$": "$.QueryExecution.Status.State"
            }
          }
        }
      },
      "Next": "drop database",
      "ResultPath": "$.taskresult"
    },
    "drop database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::athena:startQueryExecution",
      "Parameters": {
        "QueryString.$": "States.Format( 'drop database {} cascade', $.QueryList[0].QueryDatabase )",
        "ResultConfiguration": {
          "OutputLocation.$": "States.Format( 's3://{}/{}', $.QueryList[0].ResultsBucket, $.QueryList[0].ResultsPrefix )"
        },
        "WorkGroup": "rcs3"
      },
      "Next": "transform Athena output to S3 Batch input",
      "ResultPath": null
    },
    "transform Athena output to S3 Batch input": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:{{ REGION }}:{{ ACCOUNT }}:function:createS3BatchInput:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "iterate over Athena output files"
    },
    "iterate over Athena output files": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "submit S3 Batch restore job",
        "States": {
          "submit S3 Batch restore job": {
            "Type": "Task",
            "End": true,
            "Parameters": {
              "AccountId": "{{ ACCOUNT }}",
              "ClientRequestToken.$": "$.FileToken",
              "ConfirmationRequired": "False",
              "Manifest": {
                "Spec": {
                  "Format": "S3BatchOperations_CSV_20180820",
                  "Fields": [
                    "Bucket",
                    "Key",
                    "VersionId"
                  ]
                },
                "Location": {
                  "ObjectArn.$": "$.ResultsFile",
                  "ETag.$": "$.ETag"
                }
              },
              "Operation": {
                "S3InitiateRestoreObject": {
                  "ExpirationInDays.$": "$.ExpireDays",
                  "GlacierJobTier": "BULK"
                }
              },
              "Priority": 10,
              "Report": {
                "Bucket": "arn:aws:s3:::{{ OWNER }}-{{ SYSTEM }}-{{ INVENTORY_POSTFIX }}",
                "Prefix": "rcs3",
                "Format": "Report_CSV_20180820",
                "Enabled": true,
                "ReportScope": "FailedTasksOnly"
              },
              "RoleArn": "arn:aws:iam::{{ ACCOUNT }}:role/{{ OWNER }}-{{ SYSTEM }}-restore-s3batch-perms-role"
            },
            "Resource": "arn:aws:states:::aws-sdk:s3control:createJob",
            "ResultSelector": {
              "JobId.$": "$.JobId",
              "AccountId": "{{ ACCOUNT }}"
            }
          }
        }
      },
      "ItemsPath": "$.CreateJobItems",
      "ResultPath": "$.CreateJobItems",
      "Next": "wait 2 minutes"
    },
    "poll job status": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:{{ REGION }}:{{ ACCOUNT }}:function:pollCreateJobStatus:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Choice"
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.notifyUser",
          "IsPresent": true,
          "Next": "notify user restore submitted"
        }
      ],
      "Default": "wait 2 minutes"
    },
    "wait 2 minutes": {
      "Type": "Wait",
      "Seconds": 120,
      "Next": "poll job status"
    },
    "notify user restore submitted": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message.$": "$.notifyUser",
        "Subject": "{{ OWNER }} {{ SYSTEM }} file submitted for recovery from Glacier",
        "TopicArn": "arn:aws:sns:{{ REGION }}:{{ ACCOUNT }}:{{ OWNER }}-{{ SYSTEM }}-{{ OWNER_NOTIFY }}"
      },
      "ResultPath": null,
      "OutputPath": "$.CarryForward",
      "Next": "add event bridge notifications to bucket"
    },
    "add event bridge notifications to bucket": {
      "Type": "Task",
      "Parameters": {
        "Bucket": "{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }}",
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Id": "glacier-restore",
              "LambdaFunctionArn": "arn:aws:lambda:{{ REGION }}:{{ ACCOUNT }}:function:updateDynamodb",
              "Events": [
                "s3:ObjectRestore:Completed"
              ]
            }
          ],
          "EventBridgeConfiguration": {}
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:putBucketNotificationConfiguration",
      "ResultPath": null,
      "Next": "prepare Athena output for Dynamodb import"
    },
    "prepare Athena output for Dynamodb import": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:{{ REGION }}:{{ ACCOUNT }}:function:prepDynamoImport:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": null,
      "Next": "ImportTable"
    },
    "ImportTable": {
      "Type": "Task",
      "Parameters": {
        "InputFormat": "CSV",
        "S3BucketSource": {
          "S3Bucket.$": "$.ResultsBucket",
          "S3KeyPrefix.$": "$.ResultsPrefix"
        },
        "TableCreationParameters": {
          "AttributeDefinitions": [
            {
              "AttributeName": "filename",
              "AttributeType": "S"
            },
            {
              "AttributeName": "version_id",
              "AttributeType": "S"
            }
          ],
          "KeySchema": [
            {
              "AttributeName": "filename",
              "KeyType": "HASH"
            },
            {
              "AttributeName": "version_id",
              "KeyType": "RANGE"
            }
          ],
          "ProvisionedThroughput": {
            "ReadCapacityUnits": 5,
            "WriteCapacityUnits": 5
          },
          "TableName": "rcs3-{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }}"
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:importTable",
      "Next": "wait for table creation"
    },
    "wait for table creation": {
      "Type": "Wait",
      "Seconds": 120,
      "Next": "DescribeTable"
    },
    "DescribeTable": {
      "Type": "Task",
      "Parameters": {
        "TableName": "rcs3-{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }}"
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:describeTable",
      "Next": "check if table is ready"
    },
    "check if table is ready": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Table.TableStatus",
          "StringMatches": "ACTIVE",
          "Next": "Initial Wait 5 Hours Bulk"
        },
        {
          "Variable": "$.Table.TableStatus",
          "StringMatches": "CREATING",
          "Next": "wait for table creation"
        }
      ],
      "Default": "Fail"
    },
    "Fail": {
      "Type": "Fail"
    },
    "Initial Wait 5 Hours Bulk": {
      "Type": "Wait",
      "Seconds": 18000,
      "Next": "Check Glacier Restore Completed"
    },
    "Check Glacier Restore Completed": {
      "Type": "Task",
      "Parameters": {
        "TableName": "rcs3-{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }}",
        "Select": "COUNT",
        "FilterExpression": "#v = :s",
        "ExpressionAttributeNames": {
          "#v": "{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }}"
        },
        "ExpressionAttributeValues": {
          ":s": {
            "S": "yes"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
      "Next": "have objects been restored"
    },
    "have objects been restored": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Count",
          "NumericEqualsPath": "$.ScannedCount",
          "Next": "remove event bridge notification from bucket"
        }
      ],
      "Default": "Wait 1 Hour"
    },
    "Wait 1 Hour": {
      "Type": "Wait",
      "Seconds": 3600,
      "Next": "Check Glacier Restore Completed"
    },
    "remove event bridge notification from bucket": {
      "Type": "Task",
      "Parameters": {
        "Bucket": "{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }}",
        "NotificationConfiguration": {}
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:putBucketNotificationConfiguration",
      "Next": "DeleteTable"
    },
    "DeleteTable": {
      "Type": "Task",
      "Parameters": {
        "TableName": "rcs3-{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTIFX }}"
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:deleteTable",
      "Next": "notify user restore ready"
    },
    "notify user restore ready": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": "{{ OWNER }} {{ SYSTEM }} files have been retrieved from Glacier",
        "Subject": "{{ OWNER }} {{ SYSTEM }} files ready for recovery",
        "TopicArn": "arn:aws:sns:{{ REGION }}:{{ ACCOUNT }}:{{ OWNER }}-{{ SYSTEM }}-{{ OWNER_NOTIFY }}"
      },
      "End": true
    }
  },
  "TimeoutSeconds": 86400
}

