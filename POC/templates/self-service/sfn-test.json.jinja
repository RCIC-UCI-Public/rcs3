{
  "Comment": "Use Athena to query files in {{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTFIX }} that have been moved to Glacier",
  "StartAt": "create Athena queries",
  "States": {
    "create database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::athena:startQueryExecution",
      "Parameters": {
        "QueryString.$": "States.Format( 'create database if not exists {}', $.QueryDatabase )",
        "ResultConfiguration": {
          "OutputLocation.$": "States.Format( 's3://{}/{}', $.QueryInventory.QueryList[0].ResultsBucket, $.QueryInventory.QueryList[0].ResultsPrefix )"
        },
        "WorkGroup": "rcs3"
      },
      "Next": "load schema",
      "ResultPath": null
    },
    "create Athena queries": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "BackupBucket": "{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTFIX }}",
          "InventoryBucket": "{{ OWNER }}-{{ SYSTEM }}-{{ INVENTORY_POSTFIX }}",
          "HiveDir": "{{ OWNER }}-{{ SYSTEM }}-{{ BUCKET_POSTFIX }}/{{ OWNER }}-{{ SYSTEM }}-daily/hive/dt={}-01-00/",
          "RestoreList.$": "$.RestoreList",
          "ExpireDays.$": "$.ExpireDays"
        },
        "FunctionName": "arn:aws:lambda:{{ REGION }}:{{ ACCOUNT }}:function:createAthenaQueries:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "create database",
      "Comment": "look for latest S3 inventory",
      "OutputPath": "$.Payload"
    },
    "load schema": {
      "Type": "Task",
      "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
      "Parameters": {
        "QueryExecutionContext": {
          "Database.$": "$.QueryDatabase"
        },
        "QueryString.$": "$.QuerySchema",
        "ResultConfiguration": {
          "OutputLocation.$": "States.Format( 's3://{}/{}', $.QueryInventory.QueryList[0].ResultsBucket, $.QueryInventory.QueryList[0].ResultsPrefix )"
        },
        "WorkGroup": "rcs3"
      },
      "ResultPath": null,
      "OutputPath": "$.QueryInventory",
      "Next": "iterate over each string"
    },
    "iterate over each string": {
      "Type": "Map",
      "ItemsPath": "$.QueryList",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "query inventory",
        "States": {
          "query inventory": {
            "Type": "Task",
            "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
            "Parameters": {
              "QueryExecutionContext": {
                "Database.$": "$.QueryDatabase"
              },
              "QueryString.$": "$.SearchString",
              "ResultConfiguration": {
                "OutputLocation.$": "States.Format( 's3://{}/{}', $.ResultsBucket, $.ResultsPrefix )"
              },
              "WorkGroup": "rcs3"
            },
            "End": true,
            "ResultSelector": {
              "ResultsFile.$": "$.QueryExecution.ResultConfiguration.OutputLocation",
              "State.$": "$.QueryExecution.Status.State"
            }
          }
        }
      },
      "Next": "drop database",
      "ResultPath": "$.taskresult"
    },
    "drop database": {
      "Type": "Task",
      "Resource": "arn:aws:states:::athena:startQueryExecution",
      "Parameters": {
        "QueryString.$": "States.Format( 'drop database {} cascade', $.QueryList[0].QueryDatabase )",
        "ResultConfiguration": {
          "OutputLocation.$": "States.Format( 's3://{}/{}', $.QueryList[0].ResultsBucket, $.QueryList[0].ResultsPrefix )"
        },
        "WorkGroup": "rcs3"
      },
      "Next": "transform Athena output to S3 Batch input",
      "ResultPath": null
    },
    "transform Athena output to S3 Batch input": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "arn:aws:lambda:{{ REGION }}:{{ ACCOUNT }}:function:createS3BatchInput:$LATEST"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "End": true
    }
  },
  "TimeoutSeconds": 86400
}

